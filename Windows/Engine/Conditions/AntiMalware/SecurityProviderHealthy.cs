using System;
using Org.InCommon.InCert.Engine.Importables;
using Org.InCommon.InCert.Engine.Results.Misc;
using Org.InCommon.InCert.Engine.Engines;
using Org.InCommon.InCert.Engine.Utilities;

namespace Org.InCommon.InCert.Engine.Conditions.AntiMalware
{
    class SecurityProviderHealthy:AbstractCondition
    {
        public SecurityProviderHealthy(IEngine engine):base(engine)
        {
        }

        [PropertyAllowedFromXml]
        public SecurityUtilities.SecurityProviders Provider { get; set; }

        public override BooleanReason Evaluate()
        {
            try
            {
                var value = SecurityUtilities.QuerySecurityProviderHealth(Provider);
                return value != SecurityUtilities.SecurityProviderHealth.Good 
                    ? new BooleanReason(false, "Windows reports that the health of the {0} provider is {1}", Provider, value) 
                    : new BooleanReason(true, "Windows reports that the health of the {0} provider is {1}", Provider, value);
            }
            catch (Exception e)
            {
                return new BooleanReason(false, "An issue occurred while evaluating the condition: {0}", e.Message);
            }
        }

        public override bool IsInitialized()
        {
            return Provider != SecurityUtilities.SecurityProviders.None;
        }

        public override void ConfigureFromNode(System.Xml.Linq.XElement node)
        {
            base.ConfigureFromNode(node);
            Provider = XmlUtilities.GetEnumValueFromAttribute(node, "provider", SecurityUtilities.SecurityProviders.None);
        }
    }
}
