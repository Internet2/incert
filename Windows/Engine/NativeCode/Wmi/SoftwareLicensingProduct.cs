using System.Collections;
using System.ComponentModel;
using System.Management;

namespace Org.InCommon.InCert.Engine.NativeCode.Wmi {

    
    // instantiable interface / class to help with unit testing
    public interface ISoftwareLicensingProductProxy
    {
        SoftwareLicensingProduct.SoftwareLicensingProductCollection GetInstances();
    }

    public class SoftwareLicensingProductProxy : ISoftwareLicensingProductProxy
    {
        public SoftwareLicensingProduct.SoftwareLicensingProductCollection GetInstances()
        {
            return SoftwareLicensingProduct.GetInstances();
        }
    }
    
    
    // code automatically generated by mgmtclassgen: mgmtclassgen SoftwareLicensingProduct /L CS /N root\cimv2 /P SoftwareLicensingProduct.cs

    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // Datetime conversion functions ToDateTime and ToDmtfDateTime are added to the class to convert DMTF datetime to System.DateTime and vice-versa.
    // An Early Bound class generated for the WMI class.SoftwareLicensingProduct
    public class SoftwareLicensingProduct : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "root\\cimv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "SoftwareLicensingProduct";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public SoftwareLicensingProduct() {
            this.InitializeObject(null, null, null);
        }
        
        public SoftwareLicensingProduct(string keyID) {
            this.InitializeObject(null, new System.Management.ManagementPath(SoftwareLicensingProduct.ConstructPath(keyID)), null);
        }
        
        public SoftwareLicensingProduct(System.Management.ManagementScope mgmtScope, string keyID) {
            this.InitializeObject(((System.Management.ManagementScope)(mgmtScope)), new System.Management.ManagementPath(SoftwareLicensingProduct.ConstructPath(keyID)), null);
        }
        
        public SoftwareLicensingProduct(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            this.InitializeObject(null, path, getOptions);
        }
        
        public SoftwareLicensingProduct(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) {
            this.InitializeObject(mgmtScope, path, null);
        }
        
        public SoftwareLicensingProduct(System.Management.ManagementPath path) {
            this.InitializeObject(null, path, null);
        }
        
        public SoftwareLicensingProduct(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            this.InitializeObject(mgmtScope, path, getOptions);
        }
        
        public SoftwareLicensingProduct(System.Management.ManagementObject theObject) {
            Initialize();
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public SoftwareLicensingProduct(System.Management.ManagementBaseObject theObject) {
            Initialize();
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "root\\cimv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == string.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("KMS host PID in AO used for the last AD activation.")]
        public string ADActivationCsvlkPid {
            get {
                return ((string)(curObj["ADActivationCsvlkPid"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("KMS host SkuId in AO used for the last AD activation.")]
        public string ADActivationCsvlkSkuId {
            get {
                return ((string)(curObj["ADActivationCsvlkSkuId"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Fully qualified distinguished name of AO used for the last AD activation.")]
        public string ADActivationObjectDN {
            get {
                return ((string)(curObj["ADActivationObjectDN"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Name of AO used for the last AD activation.")]
        public string ADActivationObjectName {
            get {
                return ((string)(curObj["ADActivationObjectName"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("ID of current product\'s Application")]
        public virtual string ApplicationID {
            get {
                return ((string)(curObj["ApplicationID"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Product key PID2 of the AVMA host.")]
        public string AutomaticVMActivationHostDigitalPid2 {
            get {
                return ((string)(curObj["AutomaticVMActivationHostDigitalPid2"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("The machine name of the AVMA host.")]
        public string AutomaticVMActivationHostMachineName {
            get {
                return ((string)(curObj["AutomaticVMActivationHostMachineName"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAutomaticVMActivationLastActivationTimeNull {
            get {
                if ((curObj["AutomaticVMActivationLastActivationTime"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("The last activation time for the product.")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.DateTime AutomaticVMActivationLastActivationTime {
            get {
                if ((curObj["AutomaticVMActivationLastActivationTime"] != null)) {
                    return ToDateTime(((string)(curObj["AutomaticVMActivationLastActivationTime"])));
                }
                else {
                    return System.DateTime.MinValue;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Product Description")]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Last discovered KMS host IP address through DNS.")]
        public string DiscoveredKeyManagementServiceMachineIpAddress {
            get {
                return ((string)(curObj["DiscoveredKeyManagementServiceMachineIpAddress"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Last discovered KMS host name through DNS.")]
        public string DiscoveredKeyManagementServiceMachineName {
            get {
                return ((string)(curObj["DiscoveredKeyManagementServiceMachineName"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDiscoveredKeyManagementServiceMachinePortNull {
            get {
                if ((curObj["DiscoveredKeyManagementServiceMachinePort"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Last discovered KMS host port through DNS.")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public uint DiscoveredKeyManagementServiceMachinePort {
            get {
                if ((curObj["DiscoveredKeyManagementServiceMachinePort"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((uint)(curObj["DiscoveredKeyManagementServiceMachinePort"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEvaluationEndDateNull {
            get {
                if ((curObj["EvaluationEndDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("The expiration date of this product\'s application.  After this date, the LicenseS" +
            "tatus will be Unlicensed, and cannot be Activated.")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.DateTime EvaluationEndDate {
            get {
                if ((curObj["EvaluationEndDate"] != null)) {
                    return ToDateTime(((string)(curObj["EvaluationEndDate"])));
                }
                else {
                    return System.DateTime.MinValue;
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsExtendedGraceNull {
            get {
                if ((curObj["ExtendedGrace"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Extended grace time in minutes before the parent application becomes unlicensed.")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public uint ExtendedGrace {
            get {
                if ((curObj["ExtendedGrace"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((uint)(curObj["ExtendedGrace"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsGenuineStatusNull {
            get {
                if ((curObj["GenuineStatus"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Genuine status for this product.")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public uint GenuineStatus {
            get {
                if ((curObj["GenuineStatus"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((uint)(curObj["GenuineStatus"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsGracePeriodRemainingNull {
            get {
                if ((curObj["GracePeriodRemaining"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Remaining time in minutes before the parent application goes into Notification Mo" +
            "de.  For volume clients, this is the remaining time before re-Activation is requ" +
            "ired.")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public uint GracePeriodRemaining {
            get {
                if ((curObj["GracePeriodRemaining"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((uint)(curObj["GracePeriodRemaining"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("IAID needed on the host to keep this VM from entering notifications.")]
        public string IAID {
            get {
                return ((string)(curObj["IAID"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Product Identifier")]
        public string ID {
            get {
                return ((string)(curObj["ID"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsIsKeyManagementServiceMachineNull {
            get {
                if ((curObj["IsKeyManagementServiceMachine"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Indicates if KMS is enabled on the computer: 1 if true, 0 if false.")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public uint IsKeyManagementServiceMachine {
            get {
                if ((curObj["IsKeyManagementServiceMachine"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((uint)(curObj["IsKeyManagementServiceMachine"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsKeyManagementServiceCurrentCountNull {
            get {
                if ((curObj["KeyManagementServiceCurrentCount"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("The count of currently active KMS clients on the KMS host. -1 indicates the host " +
            "is not enabled as a KMS, or has not received any client licensing-requests.")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public uint KeyManagementServiceCurrentCount {
            get {
                if ((curObj["KeyManagementServiceCurrentCount"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((uint)(curObj["KeyManagementServiceCurrentCount"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsKeyManagementServiceFailedRequestsNull {
            get {
                if ((curObj["KeyManagementServiceFailedRequests"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("The total count of failed KMS requests.")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public uint KeyManagementServiceFailedRequests {
            get {
                if ((curObj["KeyManagementServiceFailedRequests"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((uint)(curObj["KeyManagementServiceFailedRequests"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsKeyManagementServiceLicensedRequestsNull {
            get {
                if ((curObj["KeyManagementServiceLicensedRequests"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("The count of KMS requests from clients with License Status=1 (Licensed).")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public uint KeyManagementServiceLicensedRequests {
            get {
                if ((curObj["KeyManagementServiceLicensedRequests"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((uint)(curObj["KeyManagementServiceLicensedRequests"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("The FQDN of the resource domain containing the KMS SRV records for the org. Retur" +
            "ns null if SetKeyManagementServiceLookupDomain has not been called.")]
        public string KeyManagementServiceLookupDomain {
            get {
                return ((string)(curObj["KeyManagementServiceLookupDomain"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("The name of the KMS host. Returns null if SetKeyManagementServiceMachine has not " +
            "been called.")]
        public string KeyManagementServiceMachine {
            get {
                return ((string)(curObj["KeyManagementServiceMachine"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsKeyManagementServiceNonGenuineGraceRequestsNull {
            get {
                if ((curObj["KeyManagementServiceNonGenuineGraceRequests"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("The count of KMS requests from clients with License Status=4 (NonGenuineGrace).")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public uint KeyManagementServiceNonGenuineGraceRequests {
            get {
                if ((curObj["KeyManagementServiceNonGenuineGraceRequests"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((uint)(curObj["KeyManagementServiceNonGenuineGraceRequests"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsKeyManagementServiceNotificationRequestsNull {
            get {
                if ((curObj["KeyManagementServiceNotificationRequests"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("The count of KMS requests from clients with License Status=5 (Notification).")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public uint KeyManagementServiceNotificationRequests {
            get {
                if ((curObj["KeyManagementServiceNotificationRequests"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((uint)(curObj["KeyManagementServiceNotificationRequests"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsKeyManagementServiceOOBGraceRequestsNull {
            get {
                if ((curObj["KeyManagementServiceOOBGraceRequests"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("The count of KMS requests from clients with License Status=2 (OOBGrace).")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public uint KeyManagementServiceOOBGraceRequests {
            get {
                if ((curObj["KeyManagementServiceOOBGraceRequests"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((uint)(curObj["KeyManagementServiceOOBGraceRequests"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsKeyManagementServiceOOTGraceRequestsNull {
            get {
                if ((curObj["KeyManagementServiceOOTGraceRequests"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("The count of KMS requests from clients with License Status=3 (OOTGrace).")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public uint KeyManagementServiceOOTGraceRequests {
            get {
                if ((curObj["KeyManagementServiceOOTGraceRequests"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((uint)(curObj["KeyManagementServiceOOTGraceRequests"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsKeyManagementServicePortNull {
            get {
                if ((curObj["KeyManagementServicePort"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("The TCP port used by clients to send KMS-activation requests. Returns 0 if SetKey" +
            "ManagementServicePort has not been called.")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public uint KeyManagementServicePort {
            get {
                if ((curObj["KeyManagementServicePort"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((uint)(curObj["KeyManagementServicePort"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("KMS product key ID. Returns null if not applicable.")]
        public string KeyManagementServiceProductKeyID {
            get {
                return ((string)(curObj["KeyManagementServiceProductKeyID"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsKeyManagementServiceTotalRequestsNull {
            get {
                if ((curObj["KeyManagementServiceTotalRequests"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("The total count of valid KMS requests.")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public uint KeyManagementServiceTotalRequests {
            get {
                if ((curObj["KeyManagementServiceTotalRequests"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((uint)(curObj["KeyManagementServiceTotalRequests"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsKeyManagementServiceUnlicensedRequestsNull {
            get {
                if ((curObj["KeyManagementServiceUnlicensedRequests"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("The count of KMS requests from clients with License Status=0 (Unlicensed).")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public uint KeyManagementServiceUnlicensedRequests {
            get {
                if ((curObj["KeyManagementServiceUnlicensedRequests"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((uint)(curObj["KeyManagementServiceUnlicensedRequests"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("The dependency identifier for the family of SKUs used to determine license relati" +
            "onships for add-ons.")]
        public string LicenseDependsOn {
            get {
                return ((string)(curObj["LicenseDependsOn"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("The family identifier for the SKU used to determine license relationships for add" +
            "-ons.")]
        public string LicenseFamily {
            get {
                return ((string)(curObj["LicenseFamily"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLicenseIsAddonNull {
            get {
                if ((curObj["LicenseIsAddon"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Returns True if the product is identified as an add-on license.")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LicenseIsAddon {
            get {
                if ((curObj["LicenseIsAddon"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LicenseIsAddon"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLicenseStatusNull {
            get {
                if ((curObj["LicenseStatus"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("License status of this product\'s application.  0=Unlicensed, 1=Licensed, 2=OOBGra" +
            "ce, 3=OOTGrace, 4=NonGenuineGrace, 5=Notification, 6=ExtendedGrace.")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public uint LicenseStatus {
            get {
                if ((curObj["LicenseStatus"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((uint)(curObj["LicenseStatus"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLicenseStatusReasonNull {
            get {
                if ((curObj["LicenseStatusReason"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("A diagnostic code which indicates why a computer is in a specific licensing state" +
            ".")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public uint LicenseStatusReason {
            get {
                if ((curObj["LicenseStatusReason"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((uint)(curObj["LicenseStatusReason"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Software licensing server URL for the binding certificate")]
        public string MachineURL {
            get {
                return ((string)(curObj["MachineURL"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Product Name")]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("An identifier for this product\'s application that can be used for telephone or of" +
            "fline activation. Returns null if a product key is not installed.")]
        public virtual string OfflineInstallationId {
            get {
                return ((string)(curObj["OfflineInstallationId"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Last five characters of this product\'s key. Returns null if a product key is not " +
            "installed.")]
        public virtual string PartialProductKey {
            get {
                return ((string)(curObj["PartialProductKey"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Software licensing server URL for the process certificate")]
        public string ProcessorURL {
            get {
                return ((string)(curObj["ProcessorURL"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Product key channel string. Returns null if a product key is not installed.")]
        public string ProductKeyChannel {
            get {
                return ((string)(curObj["ProductKeyChannel"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Product key ID. Returns null if a product key is not installed.")]
        public string ProductKeyID {
            get {
                return ((string)(curObj["ProductKeyID"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Product key ID2, PID2, string. Returns null if a product key is not installed.")]
        public string ProductKeyID2 {
            get {
                return ((string)(curObj["ProductKeyID2"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Software licensing server URL for the product certificate")]
        public string ProductKeyURL {
            get {
                return ((string)(curObj["ProductKeyURL"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRemainingAppReArmCountNull {
            get {
                if ((curObj["RemainingAppReArmCount"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Remaining number of times the app can be rearmed successfully.")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public uint RemainingAppReArmCount {
            get {
                if ((curObj["RemainingAppReArmCount"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((uint)(curObj["RemainingAppReArmCount"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRemainingSkuReArmCountNull {
            get {
                if ((curObj["RemainingSkuReArmCount"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Remaining number of times the sku can be rearmed successfully.")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public uint RemainingSkuReArmCount {
            get {
                if ((curObj["RemainingSkuReArmCount"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((uint)(curObj["RemainingSkuReArmCount"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRequiredClientCountNull {
            get {
                if ((curObj["RequiredClientCount"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("The minimum number of clients required to connect to a KMS host in order to enabl" +
            "e volume licensing.")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public uint RequiredClientCount {
            get {
                if ((curObj["RequiredClientCount"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((uint)(curObj["RequiredClientCount"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Additional information for token-based activation.")]
        public string TokenActivationAdditionalInfo {
            get {
                return ((string)(curObj["TokenActivationAdditionalInfo"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Thumbprint of the certificate that activated the product.")]
        public string TokenActivationCertificateThumbprint {
            get {
                return ((string)(curObj["TokenActivationCertificateThumbprint"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsTokenActivationGrantNumberNull {
            get {
                if ((curObj["TokenActivationGrantNumber"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Grant number in the token-based activation license that activated the product.")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public uint TokenActivationGrantNumber {
            get {
                if ((curObj["TokenActivationGrantNumber"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((uint)(curObj["TokenActivationGrantNumber"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("ID of the token-based activation license that activated the product.")]
        public string TokenActivationILID {
            get {
                return ((string)(curObj["TokenActivationILID"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsTokenActivationILVIDNull {
            get {
                if ((curObj["TokenActivationILVID"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Version of the token-based activation license that activated the product.")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public uint TokenActivationILVID {
            get {
                if ((curObj["TokenActivationILVID"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((uint)(curObj["TokenActivationILVID"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsTrustedTimeNull {
            get {
                if ((curObj["TrustedTime"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("The trusted time for the product.")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.DateTime TrustedTime {
            get {
                if ((curObj["TrustedTime"] != null)) {
                    return ToDateTime(((string)(curObj["TrustedTime"])));
                }
                else {
                    return System.DateTime.MinValue;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Software licensing server URL for the user license")]
        public string UseLicenseURL {
            get {
                return ((string)(curObj["UseLicenseURL"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Software licensing server URL for Genuine Validation")]
        public string ValidationURL {
            get {
                return ((string)(curObj["ValidationURL"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsVLActivationIntervalNull {
            get {
                if ((curObj["VLActivationInterval"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("The frequency, in minutes, of how often a client will contact the KMS host before" +
            " the product is licensed.")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public uint VLActivationInterval {
            get {
                if ((curObj["VLActivationInterval"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((uint)(curObj["VLActivationInterval"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsVLActivationTypeNull {
            get {
                if ((curObj["VLActivationType"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Activation type used for the last successful VL client activation.")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public uint VLActivationType {
            get {
                if ((curObj["VLActivationType"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((uint)(curObj["VLActivationType"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsVLActivationTypeEnabledNull {
            get {
                if ((curObj["VLActivationTypeEnabled"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("Activation type configured for VL client.")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public uint VLActivationTypeEnabled {
            get {
                if ((curObj["VLActivationTypeEnabled"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((uint)(curObj["VLActivationTypeEnabled"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsVLRenewalIntervalNull {
            get {
                if ((curObj["VLRenewalInterval"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("The frequency, in minutes, of how often a client will contact the KMS host after " +
            "the product is licensed.")]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public uint VLRenewalInterval {
            get {
                if ((curObj["VLRenewalInterval"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((uint)(curObj["VLRenewalInterval"]));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (string.Compare(path.ClassName, this.ManagementClassName, true, System.Globalization.CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (string.Compare(((string)(theObj["__CLASS"])), this.ManagementClassName, true, System.Globalization.CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    int count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((string.Compare(((string)(parentClasses.GetValue(count))), this.ManagementClassName, true, System.Globalization.CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        // Converts a given datetime in DMTF format to System.DateTime object.
        static System.DateTime ToDateTime(string dmtfDate) {
            System.DateTime initializer = System.DateTime.MinValue;
            int year = initializer.Year;
            int month = initializer.Month;
            int day = initializer.Day;
            int hour = initializer.Hour;
            int minute = initializer.Minute;
            int second = initializer.Second;
            long ticks = 0;
            string dmtf = dmtfDate;
            System.DateTime datetime = System.DateTime.MinValue;
            string tempString = string.Empty;
            if ((dmtf == null)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length == 0)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length != 25)) {
                throw new System.ArgumentOutOfRangeException();
            }
            try {
                tempString = dmtf.Substring(0, 4);
                if (("****" != tempString)) {
                    year = int.Parse(tempString);
                }
                tempString = dmtf.Substring(4, 2);
                if (("**" != tempString)) {
                    month = int.Parse(tempString);
                }
                tempString = dmtf.Substring(6, 2);
                if (("**" != tempString)) {
                    day = int.Parse(tempString);
                }
                tempString = dmtf.Substring(8, 2);
                if (("**" != tempString)) {
                    hour = int.Parse(tempString);
                }
                tempString = dmtf.Substring(10, 2);
                if (("**" != tempString)) {
                    minute = int.Parse(tempString);
                }
                tempString = dmtf.Substring(12, 2);
                if (("**" != tempString)) {
                    second = int.Parse(tempString);
                }
                tempString = dmtf.Substring(15, 6);
                if (("******" != tempString)) {
                    ticks = (long.Parse(tempString) * ((long)((System.TimeSpan.TicksPerMillisecond / 1000))));
                }
                if (((((((((year < 0) 
                            || (month < 0)) 
                            || (day < 0)) 
                            || (hour < 0)) 
                            || (minute < 0)) 
                            || (minute < 0)) 
                            || (second < 0)) 
                            || (ticks < 0))) {
                    throw new System.ArgumentOutOfRangeException();
                }
            }
            catch (System.Exception e) {
                throw new System.ArgumentOutOfRangeException(null, e.Message);
            }
            datetime = new System.DateTime(year, month, day, hour, minute, second, 0);
            datetime = datetime.AddTicks(ticks);
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(datetime);
            int UTCOffset = 0;
            int OffsetToBeAdjusted = 0;
            long OffsetMins = ((long)((tickOffset.Ticks / System.TimeSpan.TicksPerMinute)));
            tempString = dmtf.Substring(22, 3);
            if ((tempString != "******")) {
                tempString = dmtf.Substring(21, 4);
                try {
                    UTCOffset = int.Parse(tempString);
                }
                catch (System.Exception e) {
                    throw new System.ArgumentOutOfRangeException(null, e.Message);
                }
                OffsetToBeAdjusted = ((int)((OffsetMins - UTCOffset)));
                datetime = datetime.AddMinutes(((double)(OffsetToBeAdjusted)));
            }
            return datetime;
        }
        
        // Converts a given System.DateTime object to DMTF datetime format.
        static string ToDmtfDateTime(System.DateTime date) {
            string utcString = string.Empty;
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(date);
            long OffsetMins = ((long)((tickOffset.Ticks / System.TimeSpan.TicksPerMinute)));
            if ((System.Math.Abs(OffsetMins) > 999)) {
                date = date.ToUniversalTime();
                utcString = "+000";
            }
            else {
                if ((tickOffset.Ticks >= 0)) {
                    utcString = string.Concat("+", ((long)((tickOffset.Ticks / System.TimeSpan.TicksPerMinute))).ToString().PadLeft(3, '0'));
                }
                else {
                    string strTemp = ((long)(OffsetMins)).ToString();
                    utcString = string.Concat("-", strTemp.Substring(1, (strTemp.Length - 1)).PadLeft(3, '0'));
                }
            }
            string dmtfDateTime = ((int)(date.Year)).ToString().PadLeft(4, '0');
            dmtfDateTime = string.Concat(dmtfDateTime, ((int)(date.Month)).ToString().PadLeft(2, '0'));
            dmtfDateTime = string.Concat(dmtfDateTime, ((int)(date.Day)).ToString().PadLeft(2, '0'));
            dmtfDateTime = string.Concat(dmtfDateTime, ((int)(date.Hour)).ToString().PadLeft(2, '0'));
            dmtfDateTime = string.Concat(dmtfDateTime, ((int)(date.Minute)).ToString().PadLeft(2, '0'));
            dmtfDateTime = string.Concat(dmtfDateTime, ((int)(date.Second)).ToString().PadLeft(2, '0'));
            dmtfDateTime = string.Concat(dmtfDateTime, ".");
            System.DateTime dtTemp = new System.DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, 0);
            long microsec = ((long)((((date.Ticks - dtTemp.Ticks) 
                        * 1000) 
                        / System.TimeSpan.TicksPerMillisecond)));
            string strMicrosec = ((long)(microsec)).ToString();
            if ((strMicrosec.Length > 6)) {
                strMicrosec = strMicrosec.Substring(0, 6);
            }
            dmtfDateTime = string.Concat(dmtfDateTime, strMicrosec.PadLeft(6, '0'));
            dmtfDateTime = string.Concat(dmtfDateTime, utcString);
            return dmtfDateTime;
        }
        
        private bool ShouldSerializeAutomaticVMActivationLastActivationTime() {
            if ((this.IsAutomaticVMActivationLastActivationTimeNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeDiscoveredKeyManagementServiceMachinePort() {
            if ((this.IsDiscoveredKeyManagementServiceMachinePortNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeEvaluationEndDate() {
            if ((this.IsEvaluationEndDateNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeExtendedGrace() {
            if ((this.IsExtendedGraceNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeGenuineStatus() {
            if ((this.IsGenuineStatusNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeGracePeriodRemaining() {
            if ((this.IsGracePeriodRemainingNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeIsKeyManagementServiceMachine() {
            if ((this.IsIsKeyManagementServiceMachineNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeKeyManagementServiceCurrentCount() {
            if ((this.IsKeyManagementServiceCurrentCountNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeKeyManagementServiceFailedRequests() {
            if ((this.IsKeyManagementServiceFailedRequestsNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeKeyManagementServiceLicensedRequests() {
            if ((this.IsKeyManagementServiceLicensedRequestsNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeKeyManagementServiceNonGenuineGraceRequests() {
            if ((this.IsKeyManagementServiceNonGenuineGraceRequestsNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeKeyManagementServiceNotificationRequests() {
            if ((this.IsKeyManagementServiceNotificationRequestsNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeKeyManagementServiceOOBGraceRequests() {
            if ((this.IsKeyManagementServiceOOBGraceRequestsNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeKeyManagementServiceOOTGraceRequests() {
            if ((this.IsKeyManagementServiceOOTGraceRequestsNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeKeyManagementServicePort() {
            if ((this.IsKeyManagementServicePortNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeKeyManagementServiceTotalRequests() {
            if ((this.IsKeyManagementServiceTotalRequestsNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeKeyManagementServiceUnlicensedRequests() {
            if ((this.IsKeyManagementServiceUnlicensedRequestsNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeLicenseIsAddon() {
            if ((this.IsLicenseIsAddonNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeLicenseStatus() {
            if ((this.IsLicenseStatusNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeLicenseStatusReason() {
            if ((this.IsLicenseStatusReasonNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeRemainingAppReArmCount() {
            if ((this.IsRemainingAppReArmCountNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeRemainingSkuReArmCount() {
            if ((this.IsRemainingSkuReArmCountNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeRequiredClientCount() {
            if ((this.IsRequiredClientCountNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeTokenActivationGrantNumber() {
            if ((this.IsTokenActivationGrantNumberNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeTokenActivationILVID() {
            if ((this.IsTokenActivationILVIDNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeTrustedTime() {
            if ((this.IsTrustedTimeNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeVLActivationInterval() {
            if ((this.IsVLActivationIntervalNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeVLActivationType() {
            if ((this.IsVLActivationTypeNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeVLActivationTypeEnabled() {
            if ((this.IsVLActivationTypeEnabledNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeVLRenewalInterval() {
            if ((this.IsVLRenewalIntervalNull == false)) {
                return true;
            }
            return false;
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        [Browsable(true)]
        public void CommitObject(System.Management.PutOptions putOptions) {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put(putOptions);
            }
        }
        
        private void Initialize() {
            AutoCommitProp = true;
            isEmbedded = false;
        }
        
        private static string ConstructPath(string keyID) {
            string strPath = "root\\cimv2:SoftwareLicensingProduct";
            strPath = string.Concat(strPath, string.Concat(".ID=", string.Concat("\"", string.Concat(keyID, "\""))));
            return strPath;
        }
        
        private void InitializeObject(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            Initialize();
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static SoftwareLicensingProductCollection GetInstances() {
            return GetInstances(null, null, null);
        }
        
        public static SoftwareLicensingProductCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static SoftwareLicensingProductCollection GetInstances(string[] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static SoftwareLicensingProductCollection GetInstances(string condition, string[] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static SoftwareLicensingProductCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\cimv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "SoftwareLicensingProduct";
            pathObj.NamespacePath = "root\\cimv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new SoftwareLicensingProductCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static SoftwareLicensingProductCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static SoftwareLicensingProductCollection GetInstances(System.Management.ManagementScope mgmtScope, string[] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static SoftwareLicensingProductCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, string[] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\cimv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("SoftwareLicensingProduct", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new SoftwareLicensingProductCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static SoftwareLicensingProduct CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            System.Management.ManagementClass tmpMgmtClass = new System.Management.ManagementClass(mgmtScope, mgmtPath, null);
            return new SoftwareLicensingProduct(tmpMgmtClass.CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        public uint Activate() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("Activate", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public uint ClearKeyManagementServiceLookupDomain() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("ClearKeyManagementServiceLookupDomain", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public uint ClearKeyManagementServiceMachine() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("ClearKeyManagementServiceMachine", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public uint ClearKeyManagementServicePort() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("ClearKeyManagementServicePort", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public uint ClearVLActivationTypeEnabled() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("ClearVLActivationTypeEnabled", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public uint DepositOfflineConfirmationId(string ConfirmationId, string InstallationId) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("DepositOfflineConfirmationId");
                inParams["ConfirmationId"] = ((string)(ConfirmationId));
                inParams["InstallationId"] = ((string)(InstallationId));
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("DepositOfflineConfirmationId", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public uint DepositTokenActivationResponse(string CertChain, string Challenge, string Response) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("DepositTokenActivationResponse");
                inParams["CertChain"] = ((string)(CertChain));
                inParams["Challenge"] = ((string)(Challenge));
                inParams["Response"] = ((string)(Response));
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("DepositTokenActivationResponse", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public uint GenerateTokenActivationChallenge(out string Challenge) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("GenerateTokenActivationChallenge", inParams, null);
                Challenge = System.Convert.ToString(outParams.Properties["Challenge"].Value);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                Challenge = null;
                return System.Convert.ToUInt32(0);
            }
        }
        
        public uint GetPolicyInformationDWord(string PolicyName, out uint PolicyValue) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("GetPolicyInformationDWord");
                inParams["PolicyName"] = ((string)(PolicyName));
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("GetPolicyInformationDWord", inParams, null);
                PolicyValue = System.Convert.ToUInt32(outParams.Properties["PolicyValue"].Value);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                PolicyValue = System.Convert.ToUInt32(0);
                return System.Convert.ToUInt32(0);
            }
        }
        
        public uint GetPolicyInformationString(string PolicyName, out string PolicyValue) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("GetPolicyInformationString");
                inParams["PolicyName"] = ((string)(PolicyName));
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("GetPolicyInformationString", inParams, null);
                PolicyValue = System.Convert.ToString(outParams.Properties["PolicyValue"].Value);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                PolicyValue = null;
                return System.Convert.ToUInt32(0);
            }
        }
        
        public uint GetTokenActivationGrants(out string[] Grants) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("GetTokenActivationGrants", inParams, null);
                Grants = ((string[])(outParams.Properties["Grants"].Value));
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                Grants = null;
                return System.Convert.ToUInt32(0);
            }
        }
        
        public uint ReArmSku() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("ReArmSku", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public uint SetKeyManagementServiceLookupDomain(string LookupDomain) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("SetKeyManagementServiceLookupDomain");
                inParams["LookupDomain"] = ((string)(LookupDomain));
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("SetKeyManagementServiceLookupDomain", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public uint SetKeyManagementServiceMachine(string MachineName) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("SetKeyManagementServiceMachine");
                inParams["MachineName"] = ((string)(MachineName));
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("SetKeyManagementServiceMachine", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public uint SetKeyManagementServicePort(uint PortNumber) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("SetKeyManagementServicePort");
                inParams["PortNumber"] = ((uint)(PortNumber));
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("SetKeyManagementServicePort", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public uint SetVLActivationTypeEnabled(uint ActivationType) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("SetVLActivationTypeEnabled");
                inParams["ActivationType"] = ((uint)(ActivationType));
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("SetVLActivationTypeEnabled", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public uint UninstallProductKey() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("UninstallProductKey", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class SoftwareLicensingProductCollection : object, ICollection {
            
            private ManagementObjectCollection privColObj;

            public SoftwareLicensingProductCollection()
            {
                // allows for mocking in unit tests
            }

            public SoftwareLicensingProductCollection(ManagementObjectCollection objCollection) {
                privColObj = objCollection;
            }
            
            public virtual int Count {
                get {
                    return privColObj.Count;
                }
            }
            
            public virtual bool IsSynchronized {
                get {
                    return privColObj.IsSynchronized;
                }
            }
            
            public virtual object SyncRoot {
                get {
                    return this;
                }
            }
            
            public virtual void CopyTo(System.Array array, int index) {
                privColObj.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new SoftwareLicensingProduct(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return new SoftwareLicensingProductEnumerator(privColObj.GetEnumerator());
            }
            
            public class SoftwareLicensingProductEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator privObjEnum;
                
                public SoftwareLicensingProductEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    privObjEnum = objEnum;
                }
                
                public virtual object Current {
                    get {
                        return new SoftwareLicensingProduct(((System.Management.ManagementObject)(privObjEnum.Current)));
                    }
                }
                
                public virtual bool MoveNext() {
                    return privObjEnum.MoveNext();
                }
                
                public virtual void Reset() {
                    privObjEnum.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            private System.Type baseType;
            
            public WMIValueTypeConverter(System.Type inBaseType) {
                baseConverter = TypeDescriptor.GetConverter(inBaseType);
                baseType = inBaseType;
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((baseType.BaseType == typeof(System.Enum))) {
                    if ((value.GetType() == destinationType)) {
                        return value;
                    }
                    if ((((value == null) 
                                && (context != null)) 
                                && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                        return  "NULL_ENUM_VALUE" ;
                    }
                    return baseConverter.ConvertTo(context, culture, value, destinationType);
                }
                if (((baseType == typeof(bool)) 
                            && (baseType.BaseType == typeof(System.ValueType)))) {
                    if ((((value == null) 
                                && (context != null)) 
                                && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                        return "";
                    }
                    return baseConverter.ConvertTo(context, culture, value, destinationType);
                }
                if (((context != null) 
                            && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                    return "";
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
