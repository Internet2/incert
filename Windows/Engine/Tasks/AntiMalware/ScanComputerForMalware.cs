using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Windows;
using Org.InCommon.InCert.Engine.Extensions;
using Org.InCommon.InCert.Engine.Importables;
using Org.InCommon.InCert.Engine.Logging;
using Org.InCommon.InCert.Engine.Results;
using Org.InCommon.InCert.Engine.Results.ControlResults;
using Org.InCommon.InCert.Engine.Results.Errors.AntiMalware;
using Org.InCommon.InCert.Engine.Results.Errors.Path;
using Org.InCommon.InCert.Engine.Engines;
using Org.InCommon.InCert.Engine.Utilities;
using log4net;

namespace Org.InCommon.InCert.Engine.Tasks.AntiMalware
{
    class ScanComputerForMalware : AbstractTask
    {
        private static readonly ILog Log = Logger.Create();

        public ScanComputerForMalware(IEngine engine)
            : base(engine)
        {
        }

        [PropertyAllowedFromXml]
        public string ScannerPath
        {
            get { return GetDynamicValue(); }
            set { SetDynamicValue(value); }
        }

        [PropertyAllowedFromXml]
        public string InfectionListKey
        {
            get { return GetDynamicValue(); }
            set { SetDynamicValue(value); }
        }

        [PropertyAllowedFromXml]
        public bool Interactive { get; set; }

        public override IResult Execute(IResult previousResults)
        {
            try
            {
                var targetPath = Path.Combine(PathUtilities.DownloadFolder, ScannerPath);
                if (!File.Exists(targetPath))
                    return new FileNotFound { Target = ScannerPath };

                var info = new ProcessStartInfo(targetPath)
                    {
                        Arguments = "/n /q",
                        UseShellExecute = false
                    };

                if (Interactive)
                {
                    info.Arguments = "";
                    using (Process.Start(info))
                    {
                    }
                    return new NextResult();
                }

                using (var process = Process.Start(info))
                {
                    while (!process.HasExited)
                    {
                        process.WaitForExit(5);
                        Application.Current.DoEvents();
                    }

                    return GetResultFromExitCode(process.ExitCode);
                }
            }
            catch (Exception e)
            {
                return new IssueScanningForMalware { Issue = string.Format("{0} ({1})", e.GetType(), e.Message) };
            }
        }

        private IResult GetResultFromExitCode(int value)
        {
            if (value == 0)
            {
                Log.Info("No malicious software detected");
                return new NextResult();
            }

            if (value >= 6 && value <= 13)
            {
                var infectionList = GetInfectionList();
                SetInfectionList(infectionList);
                Log.WarnFormat("Windows reports that this computer is infected by malware: {0}", string.Join(", ", infectionList));
                return new MalwareDetected { Issue = string.Join(",", infectionList) };
            }

            Log.WarnFormat("An issue occurred while scanning this computer for malicious software {0}", value);
            return new IssueScanningForMalware { Issue = value.ToString(CultureInfo.InvariantCulture) };

        }

        private void SetInfectionList(List<string> value )
        {
            if (string.IsNullOrWhiteSpace(InfectionListKey))
                return;

            SettingsManager.SetTemporaryObject(InfectionListKey, value);
        }

        private static List<string> GetInfectionList()
        {
            try
            {
                var logPath = Path.Combine(new[] { PathUtilities.WindowsDirectory, "debug", "mrt.log" });
                if (!File.Exists(logPath))
                    throw new FileNotFoundException(logPath);

                var buffer = File.ReadAllText(logPath);
                var lines = buffer.Split(new[] { '\r', '\n' });
                Array.Reverse(lines);

                var malwareList = new List<string>();
                foreach (var line in lines)
                {
                    if (string.IsNullOrWhiteSpace(line))
                        continue;

                    if (line.ToLowerInvariant().StartsWith("results summary:"))
                        break;

                    if (!line.ToLowerInvariant().StartsWith("found "))
                        continue;

                    var malwareName = ExtractMalwareNameFromLogLine(line);
                    if (string.IsNullOrWhiteSpace(malwareName))
                        continue;

                    if (malwareList.Contains(malwareName))
                        continue;

                    malwareList.Add(malwareName);
                }

                if (!malwareList.Any())
                    malwareList.Add("unidentified malware");

                return malwareList;
            }
            catch (Exception e)
            {
                Log.Warn("An excption occurred while attempting to get malware list from mrt log", e);
                return new List<string> { "unidentified malware" };
            }
        }

        private static string ExtractMalwareNameFromLogLine(string value)
        {
            try
            {
                var commaPosition = value.IndexOf(",", StringComparison.Ordinal);
                if (commaPosition == -1)
                    commaPosition = value.IndexOf(" ", 6, StringComparison.Ordinal);

                return commaPosition < 6 ? "" : value.Substring(6, commaPosition - 6);
            }
            catch (Exception e)
            {
                Log.Warn("An exception occurred while attempting to extract a malware name from a log line", e);
                return "";
            }
        }

        public override string GetFriendlyName()
        {
            return "Scan computer for malicious software";
        }
    }
}
