using System;
using System.Diagnostics.Eventing.Reader;
using System.Text.RegularExpressions;
using Org.InCommon.InCert.Engine.Importables;
using Org.InCommon.InCert.Engine.Results;
using Org.InCommon.InCert.Engine.Results.ControlResults;
using Org.InCommon.InCert.Engine.Results.Errors.General;
using Org.InCommon.InCert.Engine.Engines;

namespace Org.InCommon.InCert.Engine.Tasks.AntiMalware.SecurityEssentials
{
    class GetInstallFailureReason : AbstractTask
    {
        const string Query = "<QueryList>" +
                             "<Query Id=\"0\" Path=\"Application\">" +
                             "<Select Path=\"Application\">" +
                             "*[System/EventID=100 and " +
                             "System/TimeCreated[timediff(@SystemTime) &lt;= 3000000] and " +
                             "System/Provider/@Name=\"Microsoft Security Client Setup\"]" +
                             "</Select>" + 
                             "</Query>" +
                             "</QueryList>";

        public GetInstallFailureReason(IEngine engine)
            : base(engine)
        {
        }

        [PropertyAllowedFromXml]
        public string SettingKey
        {
            get { return GetDynamicValue(); }
            set { SetDynamicValue(value); }
        }

        public override IResult Execute(IResult previousResults)
        {
            try
            {

                var result ="unknown issue";
                var query = new EventLogQuery("Application", PathType.LogName, Query);
                using (var reader = new EventLogReader(query))
                {
                    var nextEvent = reader.ReadEvent();
                    while (nextEvent != null)
                    {
                        result = GetDescriptionFromEntry(nextEvent.FormatDescription());
                        nextEvent = reader.ReadEvent();
                    }
                }

                result = GetDescriptionFromEntry(result);
                SettingsManager.SetTemporarySettingString(SettingKey, result);
                return new NextResult();
            }
            catch (Exception e)
            {
                return new ExceptionOccurred(e);
            }
        }

        private static string GetDescriptionFromEntry(string value)
        {
            if (string.IsNullOrWhiteSpace(value))
                return "unknown issue";

            var match = Regex.Match(value, "Description:(.*)");
            if (!match.Success)
                return value;

            return match.Groups.Count != 2 ? value : match.Groups[1].Value;
        }

        public override string GetFriendlyName()
        {
            return "Get Security Essentials install failure reason from event log";
        }
    }
}
