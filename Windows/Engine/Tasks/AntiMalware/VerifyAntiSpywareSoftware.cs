using System;
using Org.InCommon.InCert.Engine.Logging;
using Org.InCommon.InCert.Engine.Results;
using Org.InCommon.InCert.Engine.Results.ControlResults;
using Org.InCommon.InCert.Engine.Results.Errors.AntiMalware;
using Org.InCommon.InCert.Engine.Results.Errors.General;
using Org.InCommon.InCert.Engine.Engines;
using Org.InCommon.InCert.Engine.Utilities;
using log4net;

namespace Org.InCommon.InCert.Engine.Tasks.AntiMalware
{
    class VerifyAntiSpywareSoftware : AbstractTask
    {
        private static readonly ILog Log = Logger.Create();

        public VerifyAntiSpywareSoftware(IEngine engine)
            : base(engine)
        {
        }

        public override IResult Execute(IResult previousResults)
        {
            try
            {
                var result = SecurityUtilities.QuerySecurityProviderHealth(SecurityUtilities.SecurityProviders.AntiSpyware);
                switch (result)
                {
                    case SecurityUtilities.SecurityProviderHealth.Good:
                        Log.Info("Windows reports that this computer's anti-spyware software is in good health.");
                        return new NextResult();
                    case SecurityUtilities.SecurityProviderHealth.NotMonitored:
                        Log.Warn("Windows reports that this computer's anti-spyware software is not monitored.");
                        return new AntiSpywareHealthNotMonitored();
                    case SecurityUtilities.SecurityProviderHealth.Poor:
                        Log.Warn("Windows reports that this computer's anti-spyware software is in poor health.");
                        return new AntiSpywareHealthPoor();
                    case SecurityUtilities.SecurityProviderHealth.Snooze:
                        Log.Warn("Windows reports that this computer's security center is not active.");
                        return new SecurityCenterNotActive();
                    default:
                        throw new Exception(string.Format("Could not evaluate anti-spyware health: Windows returned unexpected result ({0})", result));
                }
            }
            catch (DllNotFoundException)
            {
                return new SecurityCenterLibrariesAbsent();
            }
            catch (Exception e)
            {
                return new ExceptionOccurred(e);
            }
        }

        public override string GetFriendlyName()
        {
            return "Verify anti-spyware software";
        }
    }
}
