using System;
using Org.InCommon.InCert.Engine.Logging;
using Org.InCommon.InCert.Engine.Results;
using Org.InCommon.InCert.Engine.Results.ControlResults;
using Org.InCommon.InCert.Engine.Results.Errors.AntiMalware;
using Org.InCommon.InCert.Engine.Results.Errors.General;
using Org.InCommon.InCert.Engine.Engines;
using Org.InCommon.InCert.Engine.Utilities;
using log4net;

namespace Org.InCommon.InCert.Engine.Tasks.AntiMalware
{
    class VerifySecurityCenter : AbstractTask
    {
        private static readonly ILog Log = Logger.Create();

        public VerifySecurityCenter(IEngine engine) : base(engine)
        {
        }

        public override IResult Execute(IResult previousResults)
        {
            try
            {
                var result =
                    SecurityUtilities.QuerySecurityProviderHealth(SecurityUtilities.SecurityProviders.SecurityService);
                if (result != SecurityUtilities.SecurityProviderHealth.Good)
                {
                    Log.WarnFormat("Windows reports an issue with this computer's security center: {0}", result);
                    return new SecurityCenterNotActive();
                }

                Log.Info("Windows reports that this computer's security center is in good health.");
                return new NextResult();
            }
            catch (DllNotFoundException)
            {
                return new SecurityCenterLibrariesAbsent();
            }
            catch (Exception e)
            {
                return new ExceptionOccurred(e);
            }

        }

        public override string GetFriendlyName()
        {
            return "Verify security center";
        }
    }
}
