<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converters="clr-namespace:Org.InCommon.InCert.Engine.UserInterface.Dialogs.Converters"
                    xmlns:assistants="clr-namespace:Org.InCommon.InCert.Engine.UserInterface.Dialogs.Assistants">

    <converters:SolidColorBrushToColorConverter x:Key="BrushToColorConverter" />
    <converters:AdditiveConverter x:Key="AdditiveConverter" />
    <converters:FontSizeToLeftThicknessConverter x:Key="FontSizeToLeftThicknessConverter" />

    <DropShadowEffect x:Key="FramedButtonEffect" ShadowDepth="0" RenderingBias="Quality" 
                      Color="{Binding Path=DataContext.GlowBrush, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BrushToColorConverter}}" 
                      Opacity="15" 
                      BlurRadius="100"  />

    <TextDecorationCollection x:Key="TextBlockDecorationsCollection">
        <TextDecoration PenThicknessUnit="FontRecommended" Location="Underline" PenOffset=".2" PenOffsetUnit="FontRenderingEmSize">
            <TextDecoration.Pen>
                <Pen Thickness="1.5" Brush="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Control}}}" />
            </TextDecoration.Pen>
        </TextDecoration>
    </TextDecorationCollection>

    <TextDecorationCollection x:Key="HyperlinkStandardDecorationCollection">
        <TextDecoration PenThicknessUnit="FontRecommended" Location="Underline" PenOffset=".2" PenOffsetUnit="FontRenderingEmSize">
            <TextDecoration.Pen>
                <Pen Thickness="1.5" Brush="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Hyperlink}}}" />
            </TextDecoration.Pen>
        </TextDecoration>
    </TextDecorationCollection>

    <Style TargetType="Hyperlink" x:Key="HyperlinkStyle">
        <Setter Property="TextDecorations" Value="{x:Null}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="True" />
                    <Condition Property="IsMouseOver" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="TextDecorations" Value="{StaticResource HyperlinkStandardDecorationCollection}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="True" />
                    <Condition Property="IsKeyboardFocused" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="TextDecorations" Value="{StaticResource HyperlinkStandardDecorationCollection}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="TextBlock" x:Key="InvertingTextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" Value="True" />
                    <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{Binding Path=Background, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsKeyboardFocused, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" Value="True" />
                    <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{Binding Path=Background, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" x:Key="TextButton" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button" >
                    <Grid Background="Transparent" VerticalAlignment="Center" HorizontalAlignment="Center">
                        <TextBlock Name="ButtonText" Text="{TemplateBinding Content}" 
                                    Foreground="{TemplateBinding Foreground}" 
                                    Cursor="Hand" Padding="0,4,0,4" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="True" />
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="TextDecorations" TargetName="ButtonText" Value="{StaticResource TextBlockDecorationsCollection}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="TextDecorations" TargetName="ButtonText" Value="{StaticResource TextBlockDecorationsCollection}" />
                        </MultiTrigger>
                        <Trigger Property="Command" Value="{x:Null}">
                            <Setter Property="TextDecorations" TargetName="ButtonText" Value="{x:Null}" />
                            <Setter Property="Cursor" TargetName="ButtonText" Value="Arrow" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="TextBlock" x:Key="ToggleButtonTextStyle">
        <Setter Property="TextDecorations" Value="{x:Null}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Cursor" Value="Hand" />
        <Style.Triggers>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="True" />
                    <Condition Property="IsMouseOver" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="TextDecorations" Value="{StaticResource TextBlockDecorationsCollection}" />
            </MultiTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource AncestorType=ToggleButton}}"  Value="True" />
                    <Condition Binding="{Binding Path=IsKeyboardFocused, RelativeSource={RelativeSource AncestorType=Control}}"  Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="TextDecorations" Value="{StaticResource TextBlockDecorationsCollection}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="CheckBox" x:Key="CheckBoxStyle">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>

    <Style TargetType="Button" x:Key="InvertingFramedButton" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="Border" 
                            BorderThickness="{Binding Path=BorderThickness, RelativeSource={RelativeSource TemplatedParent}}" 
                            CornerRadius="{Binding Path=DataContext.CornerRadius, RelativeSource={RelativeSource TemplatedParent}}"
                            Background="{Binding Path=BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
                            SnapsToDevicePixels="True">
                        <Grid Name="ContentGrid" Background="Transparent" SnapsToDevicePixels="True">
                            <Border Name="InsideBorder" 
                                Background="{Binding Path=Background, RelativeSource={RelativeSource TemplatedParent}}"
                                CornerRadius="{Binding Path=DataContext.CornerRadius, RelativeSource={RelativeSource TemplatedParent}}"
                                BorderThickness="{Binding Path=BorderThickness, RelativeSource={RelativeSource TemplatedParent}}" >
                                <ContentPresenter Content="{TemplateBinding Content}" />
                            </Border>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="InsideBorder" Property="Background" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="True" />
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="InsideBorder" Property="Background" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"></Condition>
                            </MultiTrigger.Conditions>
                            <Setter Property="Opacity" Value=".45"></Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" x:Key="FramedButton" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="Border" 
                       BorderThickness="{Binding Path=BorderThickness, RelativeSource={RelativeSource TemplatedParent}}" 
                            CornerRadius="{Binding Path=DataContext.CornerRadius, RelativeSource={RelativeSource TemplatedParent}}"
                            Background="{Binding Path=BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
                            SnapsToDevicePixels="True">
                        <Grid Name="ContentGrid" Background="Transparent">
                            <Border Name="InsideBorder" 
                                Background="{Binding Path=Background, RelativeSource={RelativeSource TemplatedParent}}"
                                CornerRadius="{Binding Path=DataContext.CornerRadius, RelativeSource={RelativeSource TemplatedParent}}"
                                BorderThickness="{Binding Path=BorderThickness, RelativeSource={RelativeSource TemplatedParent}}" >
                                <ContentPresenter Content="{TemplateBinding Content}" />
                            </Border>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Effect" Value="{StaticResource FramedButtonEffect}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="True" />
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Effect" Value="{StaticResource FramedButtonEffect}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"></Condition>
                            </MultiTrigger.Conditions>
                            <Setter Property="Opacity" Value=".45"></Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" x:Key="FramedButtonNoGlow">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="Border" 
                        BorderThickness="{Binding Path=BorderThickness, RelativeSource={RelativeSource TemplatedParent}}" 
                            CornerRadius="{Binding Path=DataContext.CornerRadius, RelativeSource={RelativeSource TemplatedParent}}"
                            Background="{Binding Path=BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
                            SnapsToDevicePixels="True">
                        <Grid Name="BackgroundGrid" Background="Transparent">
                            <Border Name="InsideBorder" 
                                Background="{Binding Path=Background, RelativeSource={RelativeSource TemplatedParent}}"
                                CornerRadius="{Binding Path=DataContext.CornerRadius, RelativeSource={RelativeSource TemplatedParent}}"
                                BorderThickness="{Binding Path=BorderThickness, RelativeSource={RelativeSource TemplatedParent}}" >
                                <ContentPresenter Content="{TemplateBinding Content}" />
                            </Border>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="InsideBorder" Property="Background" Value="{Binding Path=BorderBrush, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="True" />
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="InsideBorder" Property="Background" Value="{Binding Path=BorderBrush, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="True" />
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="InsideBorder" Property="Background" Value="{Binding Path=BorderBrush, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"></Condition>
                            </MultiTrigger.Conditions>
                            <Setter Property="Opacity" Value=".45"></Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type PasswordBox}" x:Key="PhraseFieldStyle" BasedOn="{StaticResource {x:Type PasswordBox}}">
        <Setter Property="assistants:PasswordHelper.Attach" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border Name="Bd" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true">
                        <Grid>
                            <ScrollViewer Margin="8,6,8,6" Padding="4" x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                            <TextBlock Margin="11,6,12,6" Padding="4" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(assistants:PasswordHelper.Watermark)}" Foreground="{TemplateBinding Foreground}" Opacity=".45" Visibility="Collapsed" Name="txtPrompt" VerticalAlignment="Center" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Bd" Property="Opacity" Value=".45"/>
                        </Trigger>
                        <Trigger Property="assistants:PasswordHelper.PasswordLength" Value="0">
                            <Setter Property="Visibility" TargetName="txtPrompt" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>